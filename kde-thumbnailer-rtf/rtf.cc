#line 2 "rtf.cc"

#line 4 "rtf.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rtf_create_buffer
#define yy_delete_buffer rtf_delete_buffer
#define yy_flex_debug rtf_flex_debug
#define yy_init_buffer rtf_init_buffer
#define yy_flush_buffer rtf_flush_buffer
#define yy_load_buffer_state rtf_load_buffer_state
#define yy_switch_to_buffer rtf_switch_to_buffer
#define yyin rtfin
#define yyleng rtfleng
#define yylex rtflex
#define yylineno rtflineno
#define yyout rtfout
#define yyrestart rtfrestart
#define yytext rtftext
#define yywrap rtfwrap
#define yyalloc rtfalloc
#define yyrealloc rtfrealloc
#define yyfree rtffree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE rtfrestart(rtfin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int rtfleng;

extern FILE *rtfin, *rtfout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rtftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up rtftext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via rtfrestart()), so that the user can continue scanning by
	 * just pointing rtfin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when rtftext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int rtfleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow rtfwrap()'s to do buffer switches
 * instead of setting up a fresh rtfin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void rtfrestart (FILE *input_file  );
void rtf_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE rtf_create_buffer (FILE *file,int size  );
void rtf_delete_buffer (YY_BUFFER_STATE b  );
void rtf_flush_buffer (YY_BUFFER_STATE b  );
void rtfpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void rtfpop_buffer_state (void );

static void rtfensure_buffer_stack (void );
static void rtf_load_buffer_state (void );
static void rtf_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER rtf_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE rtf_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE rtf_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE rtf_scan_bytes (yyconst char *bytes,int len  );

void *rtfalloc (yy_size_t  );
void *rtfrealloc (void *,yy_size_t  );
void rtffree (void *  );

#define yy_new_buffer rtf_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        rtfensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rtf_create_buffer(rtfin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        rtfensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rtf_create_buffer(rtfin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define rtfwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *rtfin = (FILE *) 0, *rtfout = (FILE *) 0;

typedef int yy_state_type;

extern int rtflineno;

int rtflineno = 1;

extern char *rtftext;
#define yytext_ptr rtftext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up rtftext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	rtfleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 14
#define YY_END_OF_BUFFER 15
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[121] =
    {   0,
        0,    0,   15,   11,   12,   14,   13,   11,   13,   11,
        1,    2,   11,   12,   11,   11,   11,    0,    7,    5,
        7,   11,   11,   11,   11,    0,    7,    7,    7,   11,
       11,    0,   11,   11,    8,    7,   11,    9,    9,   11,
       11,    7,   11,   11,   11,    7,    7,    6,   11,   11,
       11,    7,   11,    0,   11,    0,   11,    7,   10,   10,
        0,   11,    0,   11,    7,    0,    0,   11,    0,    0,
       11,    0,    0,   11,    0,    0,   11,    0,   11,    0,
       11,   11,    0,   11,    0,   11,   11,    0,    0,   11,
        0,    0,   11,    0,   11,    0,   11,    0,   11,    0,

       11,    0,   11,    0,   11,    0,   11,    0,   11,    0,
       11,    0,   11,    0,    3,    0,    4,    3,    4,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    1,    1,    7,    1,
        1,    1,    1,    1,    1,    1,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,   11,
       12,   13,   14,    1,   15,   15,   15,   15,   16,   15,
       17,   17,   18,   17,   17,   19,   20,   17,   17,   17,
       17,   17,   21,   17,   17,   17,   17,   17,   17,   17,
        1,   22,    1,    1,    1,    1,   15,   15,   15,   23,

       24,   15,   17,   25,   26,   17,   17,   27,   28,   17,
       17,   29,   17,   17,   30,   31,   32,   17,   17,   17,
       17,   17,   33,    1,   34,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[35] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5
    } ;

static yyconst flex_int16_t yy_base[132] =
    {   0,
        0,   33,  192,    0,    4,  347,  347,    2,    7,  160,
      347,  347,    0,    5,  184,  169,  160,    3,   63,  347,
      178,  155,   96,  167,  157,   33,  347,    8,   11,  153,
      129,  168,  161,  152,  347,   19,  168,    0,  347,  161,
      152,   38,  167,  161,  159,  156,   45,  347,  161,   25,
       48,   55,   12,   56,  145,   57,  138,   66,   43,    0,
      137,   74,  136,   76,   97,   79,   82,   84,   98,  100,
       99,  108,  110,  162,  111,  116,  195,   54,  228,  147,
      148,  148,   81,  261,  144,  145,  145,  113,  144,  129,
      117,  141,  118,  126,  126,  115,  116,  123,  123,  112,

      113,  120,  118,  110,  108,  108,  107,   87,   83,   79,
       65,   49,   18,    8,    0,    2,    0,  347,  347,  347,
      295,  300,  301,  306,  311,  316,  321,  326,  331,  336,
      341
    } ;

static yyconst flex_int16_t yy_def[132] =
    {   0,
      121,  121,  120,  122,  120,  120,  120,  122,  123,  122,
      120,  120,  122,  120,  122,  122,  122,  120,  123,  120,
       19,  122,  124,  122,  122,  120,  120,  120,  120,  122,
      124,  125,  122,  122,  120,  120,  122,  122,  120,  122,
      122,  120,  122,  122,  122,  120,  120,  120,  122,  122,
      122,  120,  126,  120,  122,  120,  122,  120,  126,  127,
      120,  122,  120,  122,  120,  120,  120,  122,  120,  120,
      122,  120,  120,  128,  120,  120,  129,  130,  128,  130,
       79,  122,  131,  129,  131,   84,  122,  130,  120,  122,
      131,  120,  122,  120,  122,  120,  122,  120,  122,  120,

      122,  120,  122,  120,  122,  120,  122,  120,  122,  120,
      122,  120,  122,  120,  122,  120,  122,  120,  120,    0,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120
    } ;

static yyconst flex_int16_t yy_nxt[382] =
    {   0,
      120,    5,    6,    7,    5,   14,   14,   15,   14,   14,
        8,   26,   27,   18,  119,   27,   28,   26,   26,   36,
      118,    9,   16,   27,   10,   26,   26,   42,   20,   54,
      117,   17,   11,   12,    5,    6,    7,    5,   21,   20,
       20,   35,   46,    8,   60,   60,   47,   35,   35,   46,
       55,   48,   56,   52,    9,   35,   35,   10,   48,   46,
       54,   56,   88,   58,   89,   11,   12,   27,   48,  120,
       46,   28,  116,   57,   65,   60,   60,  115,   67,   48,
       70,   61,   63,   67,  120,   68,   67,   71,   73,   91,
       72,   92,   74,   72,  114,  120,  120,   32,   32,   32,

       32,   46,   70,   76,   70,   28,  113,   77,   13,   75,
       48,   75,   73,  112,   73,   76,   78,   32,   78,   83,
       76,   88,  111,   89,   83,   91,  110,   92,   32,   32,
       32,   32,   32,   32,  109,  108,  107,  106,  105,  104,
      103,   38,  102,  101,  100,   99,   98,   97,   96,   95,
       32,   94,   93,   86,   92,   90,   81,   89,   69,   66,
       64,   32,   32,   80,   80,   80,   80,   62,   53,   48,
       81,   51,   82,   50,   49,   45,   44,   43,   41,   40,
       39,   37,   34,   80,   33,   30,   29,   25,   24,   23,
       22,  120,  120,  120,   80,   80,   85,   85,   85,   85,

      120,  120,  120,   86,  120,   87,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,   85,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   85,   85,   80,
       80,   80,   80,  120,  120,  120,  120,  120,   82,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,   80,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
       80,   80,   85,   85,   85,   85,  120,  120,  120,  120,
      120,   87,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,   85,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,   85,   85,    4,    4,    4,    4,    4,

       13,  120,   13,   19,   19,   19,   31,   31,   31,   31,
       31,   32,   32,   32,   32,   32,   59,  120,   59,  120,
       59,   60,  120,   60,  120,   60,   79,   79,   79,   79,
       79,   84,   84,   84,   84,   84,   80,   80,   80,   80,
       80,   85,   85,   85,   85,   85,    3,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120
    } ;

static yyconst flex_int16_t yy_chk[382] =
    {   0,
        0,    1,    1,    1,    1,    5,   14,    8,    5,   14,
        1,   18,   28,    9,  116,   29,   28,   18,   18,   29,
      114,    1,    8,   36,    1,   18,   18,   36,    9,   50,
      113,    8,    1,    1,    2,    2,    2,    2,    9,    9,
        9,   26,   42,    2,   53,   53,   42,   26,   26,   47,
       50,   42,   51,   47,    2,   26,   26,    2,   47,   52,
       54,   56,   78,   52,   78,    2,    2,   19,   52,   19,
       58,   19,  112,   51,   58,   59,   59,  111,   62,   58,
       64,   54,   56,   66,   19,   62,   67,   64,   68,   83,
       66,   83,   68,   67,  110,   19,   19,   23,   23,   23,

       23,   65,   69,   71,   70,   65,  109,   71,   23,   69,
       65,   70,   72,  108,   73,   75,   72,   23,   73,   75,
       76,   88,  107,   88,   76,   91,  106,   91,   23,   23,
       31,   31,   31,   31,  105,  104,  103,  102,  101,  100,
       99,   31,   98,   97,   96,   95,   94,   93,   92,   90,
       31,   89,   87,   86,   85,   82,   81,   80,   63,   61,
       57,   31,   31,   74,   74,   74,   74,   55,   49,   46,
       74,   45,   74,   44,   43,   41,   40,   37,   34,   33,
       32,   30,   25,   74,   24,   22,   21,   17,   16,   15,
       10,    3,    0,    0,   74,   74,   77,   77,   77,   77,

        0,    0,    0,   77,    0,   77,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   77,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   77,   77,   79,
       79,   79,   79,    0,    0,    0,    0,    0,   79,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       79,   79,   84,   84,   84,   84,    0,    0,    0,    0,
        0,   84,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   84,   84,  121,  121,  121,  121,  121,

      122,    0,  122,  123,  123,  123,  124,  124,  124,  124,
      124,  125,  125,  125,  125,  125,  126,    0,  126,    0,
      126,  127,    0,  127,    0,  127,  128,  128,  128,  128,
      128,  129,  129,  129,  129,  129,  130,  130,  130,  130,
      130,  131,  131,  131,  131,  131,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int rtf_flex_debug;
int rtf_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *rtftext;
#line 1 "rtf.ll"
#line 2 "rtf.ll"
/*
    rtf.ll  -  A simple RTF Parser (Flex code)

    Copyright (c) 2002 by Vladimir Shutoff   <vovan@shutoff.ru>    (original code)
    Copyright (c) 2004 by Thiago S. Barcelos <barcelos@ime.usp.br> (Kopete port)
    Kopete    (c) 2002-2003 by the Kopete developers  <kopete-devel@kde.org>

    *************************************************************************
    *                                                                       *
    * This program is free software; you can redistribute it and/or modify  *
    * it under the terms of the GNU General Public License as published by  *
    * the Free Software Foundation; either version 2 of the License, or     *
    * (at your option) any later version.                                   *
    *                                                                       *
    *************************************************************************

update rtf.cc:
flex -olex.yy.c  `test -f rtf.ll || echo './'`rtf.ll
sed '/^#/ s|lex.yy\.c|rtf.cc|' lex.yy.c >rtf.cc
rm -f lex.yy.c

*/

#define UP				1
#define DOWN			2
#define CMD				3
#define TXT				4
#define HEX				5
#define IMG				6
#define UNICODE_CHAR	7
#define SKIP			8
#define SLASH			9
#define S_TXT			10
#define URL				11
#define SMILE			12

//#define YY_NEVER_INTERACTIVE	1
//#define YY_ALWAYS_INTERACTIVE	0
//#define YY_MAIN			0

#line 638 "rtf.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int rtflex_destroy (void );

int rtfget_debug (void );

void rtfset_debug (int debug_flag  );

YY_EXTRA_TYPE rtfget_extra (void );

void rtfset_extra (YY_EXTRA_TYPE user_defined  );

FILE *rtfget_in (void );

void rtfset_in  (FILE * in_str  );

FILE *rtfget_out (void );

void rtfset_out  (FILE * out_str  );

int rtfget_leng (void );

char *rtfget_text (void );

int rtfget_lineno (void );

void rtfset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int rtfwrap (void );
#else
extern int rtfwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( rtftext, rtfleng, 1, rtfout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( rtfin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( rtfin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, rtfin))==0 && ferror(rtfin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(rtfin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int rtflex (void);

#define YY_DECL int rtflex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after rtftext and rtfleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 49 "rtf.ll"


#line 821 "rtf.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! rtfin )
			rtfin = stdin;

		if ( ! rtfout )
			rtfout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			rtfensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				rtf_create_buffer(rtfin,YY_BUF_SIZE );
		}

		rtf_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of rtftext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 121 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 347 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 51 "rtf.ll"
{ return UP; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 52 "rtf.ll"
{ return DOWN; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 53 "rtf.ll"
{ return SMILE; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 54 "rtf.ll"
{ return SMILE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 55 "rtf.ll"
{ return SLASH; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 56 "rtf.ll"
{ return UNICODE_CHAR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 57 "rtf.ll"
{ return CMD; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 58 "rtf.ll"
{ return HEX; }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 59 "rtf.ll"
{ return IMG; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 60 "rtf.ll"
{ return URL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 61 "rtf.ll"
{ return TXT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 62 "rtf.ll"
{ return TXT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 63 "rtf.ll"
{ return S_TXT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 64 "rtf.ll"
ECHO;
	YY_BREAK
#line 977 "rtf.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed rtfin at a new source and called
			 * rtflex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = rtfin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( rtfwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * rtftext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of rtflex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					rtfrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			rtfrestart(rtfin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) rtfrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 121 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 121 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 120);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					rtfrestart(rtfin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( rtfwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve rtftext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void rtfrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        rtfensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            rtf_create_buffer(rtfin,YY_BUF_SIZE );
	}

	rtf_init_buffer(YY_CURRENT_BUFFER,input_file );
	rtf_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void rtf_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		rtfpop_buffer_state();
	 *		rtfpush_buffer_state(new_buffer);
     */
	rtfensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	rtf_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (rtfwrap()) processing, but the only time this flag
	 * is looked at is after rtfwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void rtf_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	rtfin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE rtf_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) rtfalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rtf_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) rtfalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in rtf_create_buffer()" );

	b->yy_is_our_buffer = 1;

	rtf_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with rtf_create_buffer()
 * 
 */
    void rtf_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		rtffree((void *) b->yy_ch_buf  );

	rtffree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a rtfrestart() or at EOF.
 */
    static void rtf_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	rtf_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then rtf_init_buffer was _probably_
     * called from rtfrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void rtf_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		rtf_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void rtfpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	rtfensure_buffer_stack();

	/* This block is copied from rtf_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from rtf_switch_to_buffer. */
	rtf_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void rtfpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	rtf_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		rtf_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void rtfensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)rtfalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rtfensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)rtfrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rtfensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE rtf_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) rtfalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rtf_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	rtf_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to rtflex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       rtf_scan_bytes() instead.
 */
YY_BUFFER_STATE rtf_scan_string (yyconst char * yystr )
{
    
	return rtf_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to rtflex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE rtf_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) rtfalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in rtf_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = rtf_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in rtf_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rtftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		rtftext[rtfleng] = (yy_hold_char); \
		(yy_c_buf_p) = rtftext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		rtfleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int rtfget_lineno  (void)
{
        
    return rtflineno;
}

/** Get the input stream.
 * 
 */
FILE *rtfget_in  (void)
{
        return rtfin;
}

/** Get the output stream.
 * 
 */
FILE *rtfget_out  (void)
{
        return rtfout;
}

/** Get the length of the current token.
 * 
 */
int rtfget_leng  (void)
{
        return rtfleng;
}

/** Get the current token.
 * 
 */

char *rtfget_text  (void)
{
        return rtftext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void rtfset_lineno (int  line_number )
{
    
    rtflineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see rtf_switch_to_buffer
 */
void rtfset_in (FILE *  in_str )
{
        rtfin = in_str ;
}

void rtfset_out (FILE *  out_str )
{
        rtfout = out_str ;
}

int rtfget_debug  (void)
{
        return rtf_flex_debug;
}

void rtfset_debug (int  bdebug )
{
        rtf_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from rtflex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    rtfin = stdin;
    rtfout = stdout;
#else
    rtfin = (FILE *) 0;
    rtfout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * rtflex_init()
     */
    return 0;
}

/* rtflex_destroy is for both reentrant and non-reentrant scanners. */
int rtflex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		rtf_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		rtfpop_buffer_state();
	}

	/* Destroy the stack itself. */
	rtffree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * rtflex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *rtfalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *rtfrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void rtffree (void * ptr )
{
	free( (char *) ptr );	/* see rtfrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 64 "rtf.ll"



#include "rtfparser.h"

#include <QDebug>
#include <QTextCodec>
#include <QTextCharFormat>
#include <QUrl>


RtfLevel::RtfLevel()
{
}

RtfLevel::RtfLevel(RtfParser* p) :
	parser(p),
	m_bFontTable(false),
	m_bColors(false),
	m_nFont(0),
	m_nEncoding(0)
{
	init();
}

RtfLevel::RtfLevel(const RtfLevel &l) :
	parser(l.parser),
	previousCharFormat(l.previousCharFormat),
	m_bFontTable(l.m_bFontTable),
	m_bColors(l.m_bColors),
	m_nFont(l.m_nFont),
	m_nEncoding(l.m_nEncoding)
	
{
	init();
}

RtfLevel::~RtfLevel()
{
	if (m_textSet)
		m_html += finishTags();
}

void RtfLevel::init()
{
	m_nFontColor = 0;
	m_nBackgroundColor = 0;
	m_nFontBgColor = 0;
	m_nFontSize = 0;
	m_bBold = false;
	m_bItalic = false;
	m_bUnderline = false;

	m_isUrlTag = false;
	m_isUrlEditing = false;
	m_isFontTag = false;
	m_isFontEditing = false;
	m_isStyleAttribute = false;

	m_textSet = false;

	codec = QTextCodec::codecForName("GBK");
}

void RtfLevel::setFont(int nFont)
{
	if (nFont <= 0)
		return;

	if (m_bFontTable)
	{
		if (nFont > parser->fonts.size() + 1)
		{
			qDebug() << "Invalid font index (" << nFont << ") while parsing font table";
			return;
		}
		
		if (nFont > parser->fonts.size())
		{
			FontDef f;
			f.charset = 0;
			parser->fonts.push_back(f);
		}
		
		m_nFont = nFont;
	}
	else
	{
		if (nFont > parser->fonts.size())
		{
			qDebug() << "Invalid font index (" << nFont << ")";
			return;
		}
		
		if (m_nFont == nFont)
			return;
		
		m_nFont = nFont;
		m_nEncoding = parser->fonts[nFont-1].charset;
		
		setFont(QString(parser->fonts[nFont-1].name));
	}
}

void RtfLevel::setFont(QString fontFamily)
{
	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		//qDebug() << "font name = " << parser->fonts[nFont-1].name;
		fmt.setFontFamily(fontFamily);
		parser->cursor.mergeCharFormat(fmt);
	}
	else if (parser->m_type == 1)
		m_html += openFontTag() + openStyleAttribute() + "font-family: " + fontFamily + QString(";");
}

void RtfLevel::setText(const char* str)
{
	if (m_bColors)
	{
		if (m_bColorInit)
		{
			QColor c(m_nRed, m_nGreen, m_nBlue);
			parser->colors.push_back(c);
			resetColors();
		}
	}
	else if (m_bFontTable)
	{
		if ((m_nFont <= 0) || (m_nFont > parser->fonts.size()))
			return;

		//qDebug() << "setting font = " << str;

		FontDef& def = parser->fonts[m_nFont-1];

		const char* pp = strchr(str, ';');
		unsigned size;
		if (pp != NULL)
		{
			size = (pp - str);
			def.name = m_fontName + QByteArray(str, size);
			m_fontName.clear();
		}
		else
		{
			size = strlen(str);
			m_fontName += QByteArray(str, size);
		}
	}
	else
	{
		QString text = codec->toUnicode(str);
		//qDebug() << "insert text " << text;
		if (parser->m_type == 0)
			parser->cursor.insertText(text);
		else if (parser->m_type == 1)
		{
			m_html += closeTags() + text;
			m_textSet = true;
			parser->m_html += text;
		}
	}
}

void RtfLevel::setUrl(const char* str)
{
	QString text = codec->toUnicode(str);
	QUrl url(text);
	if (!url.isValid())
	{
		qDebug() << "url is invalid";
		setText(str);
		return;
	}
	if (parser->m_type == 0)
	{
		QTextCharFormat cf = parser->cursor.charFormat();
		QTextCharFormat fmt = cf;
		fmt.setAnchorHref(text);
		fmt.setAnchor(true);
		fmt.setForeground(Qt::blue);
		fmt.setFontUnderline(true);
		parser->cursor.setCharFormat(fmt);
		parser->cursor.insertText(text);
		parser->cursor.setCharFormat(cf);
	}
	else if (parser->m_type == 1)
	{
		m_html += finishUrlTag() + closeTags() + "<a href=\"" + text + "\">" + text + "</a>";
		m_textSet = true;
		parser->m_html += "<a href=\"" + text + "\">" + text + "</a>";
/*		m_isUrlTag = true;
		m_isUrlEditing = true;*/
	}
}

void RtfLevel::startParagraph()
{
	if (parser->m_type == 0)
		parser->cursor.insertBlock();
}

void RtfLevel::setItalic(bool b)
{
	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		fmt.setFontItalic(b);
		parser->cursor.mergeCharFormat(fmt);
	}
	else if (parser->m_type == 1)
	{
		if (b)
			m_html += closeTags() + "<i>";
		else if (m_bItalic)
			m_html += closeTags() + "</i>";
		m_bItalic = b;
	}
}

void RtfLevel::setBold(bool b)
{
	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		fmt.setFontWeight(b? QFont::Bold : QFont::Normal);
		parser->cursor.mergeCharFormat(fmt);
	}
	else if (parser->m_type == 1)
	{
		if (b)
			m_html += closeTags() + "<b>";
		else if (m_bBold)
			m_html += closeTags() + "</b>";
		m_bBold = b;
	}
}

void RtfLevel::setUnderline(bool b)
{
	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		fmt.setFontUnderline(b);
		parser->cursor.mergeCharFormat(fmt);
	}
	else if (parser->m_type == 1)
	{
		if (b)
			m_html += closeTags() + "<u>";
		else if (m_bUnderline)
			m_html += closeTags() + "</u>";
		m_bUnderline = b;
	}
}

void RtfLevel::setFontColor(unsigned short nColor)
{
	if (m_nFontColor == nColor) return;
	
	//qDebug() << "RtfLevel::setFontColor, nColor = " << nColor;
	
	if (nColor > parser->colors.size()) return;
	m_nFontColor = nColor;
	QColor c;
	if (m_nFontColor)
		c = parser->colors[m_nFontColor-1];
	
	//qDebug() << "color = " << c;

	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		fmt.setForeground(c);
		parser->cursor.mergeCharFormat(fmt);
	}
	else if (parser->m_type == 1)
	{
		m_html += openStyleAttribute() + "color: rgb(" + QString::number(c.red()) + ", " + QString::number(c.green()) + ", " + QString::number(c.blue()) + QString(");");
	}
}

void RtfLevel::setBackgroundColor(unsigned short nColor)
{
	if (m_nBackgroundColor == nColor) return;
	
	//qDebug() << "RtfLevel::setFontColor, nColor = " << nColor;
	
	if (nColor > parser->colors.size()) return;
	m_nBackgroundColor = nColor;
	QColor c;
	if (m_nBackgroundColor)
		c = parser->colors[m_nBackgroundColor-1];
	
	//qDebug() << "color = " << c;

	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		fmt.setBackground(c);
		parser->cursor.mergeCharFormat(fmt);
	}
}

void RtfLevel::setFontSizeHalfPoints(unsigned short sizeInHalfPoints)
{
	if (parser->m_type == 0)
	{
		QTextCharFormat fmt;
		fmt.setFontPointSize(sizeInHalfPoints/2);
		parser->cursor.mergeCharFormat(fmt);
	}
	else if (parser->m_type == 1)
	{
		if (m_nFontSize != sizeInHalfPoints)
			m_html += openStyleAttribute() + "font-size: " + QString::number(sizeInHalfPoints + 10) + QString("pt;");
		m_nFontSize = sizeInHalfPoints;
	}
}

void RtfLevel::storeCharFormat()
{
	if (parser->m_type == 0)
		previousCharFormat = parser->cursor.charFormat();
}

void RtfLevel::restoreCharFormat()
{
	if (parser->m_type == 0)
		parser->cursor.setCharFormat(previousCharFormat);
}

QString RtfLevel::openFontTag()
{
	if (!m_isFontTag)
	{
		QString res = finishTags();
		m_isFontTag = true;
		m_isFontEditing = true;
		return res + "<font";
	}
	else
		return "";
}

QString RtfLevel::closeFontTag()
{
	if (m_isFontTag)
	{
		m_isFontTag = false;
		return closeStyleAttribute() + ">";
	}
	else
		return "";
}

QString RtfLevel::openStyleAttribute()
{
	if (!m_isStyleAttribute)
	{
		m_isStyleAttribute = true;
		return openFontTag() + " style=\"";
	}
	else
		return "";
}

QString RtfLevel::closeStyleAttribute()
{
	if (m_isStyleAttribute)
	{
		m_isStyleAttribute = false;
		return QString("\"");
	}
	else
		return "";
}

QString RtfLevel::finishFontTag()
{
	if (m_isFontEditing)
	{
		m_isFontEditing = false;
		return closeFontTag() + "</font>";
	}
	else
		return "";
}

QString RtfLevel::finishUrlTag()
{
	if (m_isUrlEditing)
	{
		m_isUrlEditing = false;
		return closeUrlTag() + "</a>";
	}
	else
		return "";
}

QString RtfLevel::finishTags()
{
	return finishUrlTag() + finishFontTag();
}

QString RtfLevel::closeTags()
{
	if (m_isFontTag || m_isUrlTag)
	{
		m_isFontTag = false;
		m_isUrlTag = false;
		return closeStyleAttribute() + ">";
	}
	else
		return "";
}

QString RtfLevel::closeUrlTag()
{
	if (m_isUrlTag)
	{
		m_isUrlTag = false;
		return QString(">");
	}
	else
		return "";
}


RtfParser::RtfParser()
	: curLevel(this)
{
}

RtfParser::~RtfParser()
{
}

const unsigned FONTTBL		= 0;
const unsigned COLORTBL		= 1;
const unsigned RED			= 2;
const unsigned GREEN		= 3;
const unsigned BLUE			= 4;
const unsigned CF			= 5;
const unsigned FS			= 6;
const unsigned HIGHLIGHT	= 7;
const unsigned PARD			= 8;
const unsigned PAR			= 9;
const unsigned I			= 10;
const unsigned B			= 11;
const unsigned UL			= 12;
const unsigned F			= 13;
const unsigned FCHARSET		= 14;
const unsigned FNAME		= 15;
const unsigned ULNONE		= 16;
const unsigned LTRPAR		= 17;
const unsigned RTLPAR		= 18;
const unsigned LINE			= 19;
const unsigned CB			= 20;

static char cmds[] =
    "fonttbl\x00"
    "colortbl\x00"
    "red\x00"
    "green\x00"
    "blue\x00"
    "cf\x00"
    "fs\x00"
    "highlight\x00"
    "pard\x00"
    "par\x00"
    "i\x00"
    "b\x00"
    "ul\x00"
    "f\x00"
    "fcharset\x00"
    "fname\x00"
    "ulnone\x00"
    "ltrpar\x00"
    "rtlpar\x00"
    "line\x00"
    "cb\x00"
    "\x00";

static char h2d(char c)
{
    if ((c >= '0') && (c <= '9'))
        return c - '0';
    if ((c >= 'A') && (c <= 'F'))
        return (c - 'A') + 10;
    if ((c >= 'a') && (c <= 'f'))
        return (c - 'a') + 10;
    return 0;
}


void RtfParser::parse(QByteArray rtf, int defR, int defG, int defB, int defSize, QString fontFamily)
{
	if (m_type == 0)
		cursor = QTextCursor(m_doc);
	
	YY_BUFFER_STATE yy_current_buffer = rtf_scan_bytes(rtf.data(),rtf.size());
	for (;;)
	{
		int res = rtflex();
		if (!res) break;

		/*if (defR > -1)
			curLevel.setRed(defR);
		if (defG > -1)
			curLevel.setRed(defG);
		if (defB > -1)
			curLevel.setRed(defB);*/

		if (defSize > -1)
			curLevel.setFontSizeHalfPoints(defSize * 2);

		switch (res)
		{
		case UP:
			curLevel.storeCharFormat();
			levels.push(curLevel);
			break;
		case DOWN:
			if (!levels.empty())
			{
				curLevel = levels.top();
				levels.pop();
				curLevel.restoreCharFormat();
			}
			break;
		case HEX:
			{
				char s[2];
				s[0] = (h2d(rtftext[2]) << 4) + h2d(rtftext[3]);
				s[1] = 0;
				curLevel.setText(s);
				break;
			}
		case UNICODE_CHAR:
			{
				if (m_type == 0)
					cursor.insertText(QChar((unsigned short)(atol(rtftext + 2))));
				else if (m_type == 1)
					m_html += QChar((unsigned short)(atol(rtftext + 2)));
				break;
			}
		case SLASH:
			curLevel.setText(rtftext+1);
			break;
		case TXT:
			curLevel.setText(rtftext);
			break;
		case URL:
			curLevel.setUrl(rtftext);
			break;
		case CMD:
			{
				const char* cmd = rtftext + 1;
				unsigned n_cmd = 0;
				unsigned cmd_size = 0;
				int cmd_value = -1;
				const char* p;
				for (p = cmd; *p; p++, cmd_size++)
					if (((*p >= '0') && (*p <= '9')) || (*p == ' ')) break;
				if (*p && (*p != ' ')) cmd_value = atol(p);
				for (p = cmds; *p; p += strlen(p) + 1, n_cmd++)
				{
					if (strlen(p) >  cmd_size) continue;
					if (!memcmp(p, cmd, cmd_size)) break;
				}
				cmd += strlen(p);
				
				switch (n_cmd)
				{
				case FONTTBL:
					curLevel.setFontTbl();
					break;
				case F:
					// RTF fonts are 0-based; our font index is 1-based.
					if (fontFamily == "")
						curLevel.setFont(cmd_value+1);
					else
						curLevel.setFont(fontFamily);
					break;
				case FS:
					if (defSize < 0)
						curLevel.setFontSizeHalfPoints(cmd_value);
					break;
				case COLORTBL:
					curLevel.setColors();
					break;
				case RED:
					if (defR < 0)
						curLevel.setRed(cmd_value);
					else
						curLevel.setRed(defR);
					break;
				case GREEN:
					if (defG < 0)
						curLevel.setGreen(cmd_value);
					else
						curLevel.setGreen(defG);
					break;
				case BLUE:
					if (defB < 0)
						curLevel.setBlue(cmd_value);
					else
						curLevel.setBlue(defB);
					break;
				case CF:
					curLevel.setFontColor(cmd_value);
					break;
				case CB:
					curLevel.setBackgroundColor(cmd_value);
					break;
				case PAR:
					curLevel.startParagraph();
					break;
				case I:
					curLevel.setItalic(cmd_value != 0);
					break;
				case B:
					curLevel.setBold(cmd_value != 0);
					break;
				case UL:
					curLevel.setUnderline(cmd_value != 0);
					break;
				case ULNONE:
					curLevel.setUnderline(false);
					break;
				}
			}
			break;
		}
	}
	rtf_delete_buffer(yy_current_buffer);
	yy_current_buffer = NULL;
	
	levels.clear();
}

void RtfParser::parseToTextDocument(QByteArray rtf, QTextDocument* doc, int defR, int defG, int defB, int defSize, QString fontFamily)
{
	m_type = 0;
	m_doc = doc;
	parse(rtf, defR, defG, defB, defSize, fontFamily);
}

void RtfParser::parseToHTML(QByteArray rtf, QString& html)
{
	m_type = 1;
	parse(rtf);
	html = m_html;
}

